
error_log /var/log/nginx/error.log debug;

server {
  listen 80;
  server_name _;
  return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name localhost;

    ssl_certificate     /certs/edge/certificate.crt;
    ssl_certificate_key /certs/edge/private.key;
    ssl_protocols TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location /validate {
        proxy_pass http://vouch:9090/validate;
        proxy_set_header Host $http_host;
        # Vouch Proxy only acts on the request headers
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";

        # optionally add X-Vouch-User as returned by Vouch Proxy along with the request
        auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

        # these return values are used by the @error401 call
        auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
        auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
        auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
    }

    location /logout {
        # Assuming Vouch is set to handle /logout at this path
        proxy_pass http://vouch:9090/logout;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /auth {
        proxy_pass http://vouch:9090/auth;
        proxy_set_header Host $http_host;
    }

    location /login {
        proxy_pass http://vouch:9090/login;
        proxy_set_header Host $http_host;
    }

    location / {
        #
        root /usr/share/nginx/html;
        index index.html;
    }

    location /protected {
        auth_request /validate;
        auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;
        root /usr/share/nginx/html;
        index index.html;

        expires 0;
        add_header Cache-Control "no-cache, no-store, must-revalidate, max-age=0";
        add_header Pragma "no-cache";

        error_page 401 = @prompt_login;

        location /protected/debug_nginx_edge {
            rewrite ^/protected/debug_nginx_edge(.*) /$1 break;
            proxy_pass http://debug_nginx_edge:5000; # Adjust the port and service name as necessary
            include /etc/nginx/conf.d/common-headers.conf;
        }

        location /protected/internal {
            rewrite ^/protected/internal(/?)(.*) /$2 break;
            proxy_pass https://host.docker.internal:8443; # Adjust the protocol, host, and port as necessary
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";

            include /etc/nginx/conf.d/common-headers.conf;
            proxy_ssl_certificate     /certs/edge/nginxEdge.crt;
            proxy_ssl_certificate_key /certs/edge/nginxEdge.key;
            proxy_ssl_trusted_certificate /certs/internal/nginxInternal.crt; # Path to Nginx B's certificate for verification
            proxy_ssl_verify on;
            proxy_ssl_verify_depth 2;
        }

    }

    location @prompt_login {
        return 302 https://localhost/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;

    }

}
